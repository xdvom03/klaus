(defun crawler-window ()
  (let ((W (window "Botelaire welcomes you, human being!")))
    (ltk:on-close W #'(lambda ()
                        (ltk:destroy ltk:*tk*)))
    (let ((pb (progress-bar 3 0 W "#692" "#841")))
      (labels ((zoombot (seed domains per-domain target)
                 (setf *random-state* (make-random-state t))
                 (let* ((visited-urls (list seed))
                        (followed-urls nil)
                        (url-scores (let ((acc (ht)))
                                      (setf (gethash seed acc)
                                            (zoombot-url-value seed target))
                                      acc))
                        (visited-domains (ht)))

                   (dotimes (i domains)
                     (setf (ltk-mw:percent pb) (* 100 (print (/ (1+ i) domains))))
                     ;; calls an error if it ran out of URLs
                     (let ((options (set-difference visited-urls followed-urls)))
                       (if options
                           (let ((starting-url (best-element (print (set-difference visited-urls followed-urls))
                                                             #'> #'(lambda (url) (print (gethash url url-scores))))))
                             (push starting-url followed-urls)
                             (multiple-value-bind (chosen-url chosen-score)
                                 (next-link starting-url visited-urls target)
                               (if chosen-url
                                   (progn
                                     (setf (gethash (find-domain chosen-url) visited-domains) t)
                                     (save-discovered)
                                     (print (concat "From " starting-url " to " chosen-url " with score " chosen-score))
                                     (multiple-value-bind (domain-links domain-scores)
                                         (domain-links chosen-url target per-domain chosen-score)
                                       (dolist (link domain-links)
                                         (when (not (member link visited-urls :test #'equal))
                                           (push link visited-urls)
                                           (print (concat "NEW LINK SCORE for " link))
                                           (setf (gethash link url-scores)
                                                 (print (gethash link domain-scores))))))))))
                           (error "Ran out of URLs in the queue"))))
                   (reverse visited-urls))))
        (let* ((f (frame 0 0 W))
               (e1 (entry 0 1 f))
               (e2 (entry 1 1 f))
               (e3 (entry 2 1 f))
               (e4 (entry 3 1 f)))
          
          (label 0 0 f "Starting URL")
          (label 1 0 f "Domains")
          (label 2 0 f "Steps per domain")
          (label 3 0 f "Target class")
          (button 4 0 f "Start Zoombot" #'(lambda ()
                                            (zoombot (print (ltk:text e1))
                                                     (print (read-from-string (ltk:text e2)))
                                                     (print (read-from-string (ltk:text e3)))
                                                     (print (ltk:text e4))))))
        (button 1 0 W "Go to classifier" #'(lambda ()
                                             (ltk:destroy W)
                                             (classifier-window)))
        (button 2 0 W "Go to database" #'(lambda ()
                                           (ltk:destroy W)
                                           (db-window)))))))

(defun crawler ()
  (ltk:with-ltk ()
    (ltk:withdraw ltk:*tk*)
    (crawler-window)))
