;; TBD: Do not download it all!

(defun next-link (current-url visited-urls target)
  (labels ((filter-urls (urls domain visited-urls visited-domains same-domain?)
             (terpri)
             (let* ((urls-1 (remove-duplicates urls :test #'equal))
                    (urls-2 (remove-if #'(lambda (url)
                                           (or (not (valid-scheme? url))
                                               (member (extension url)
                                                       *forbidden-extensions*
                                                       :test #'equal)))
                                       urls-1))
                    (urls-3 (remove-if #'(lambda (url) (find url visited-urls :test #'equivalent-urls))
                                       urls-2))
                    (urls-4 (remove-if-not (if same-domain?
                                               #'(lambda (url)
                                                   (equal (find-domain url)
                                                          domain))
                                               #'(lambda (url)
                                                   (not (gethash (find-domain url)
                                                                 visited-domains))))
                                           urls-3))
                    (urls-5 (up-to-n-first *link-cap*
                                           (shuffle urls-4)))
                    (urls-6 (remove-if-not #'(lambda (url)
                                               (if (url-allowed? *crawler-name* url)
                                                   (handler-case (progn
                                                                   (redownload-url url)
                                                                   (let* ((text (read-text url))
                                                                          (vocab (wordlist text)))
                                                                     (if (and (> (length vocab) *min-word-count*)
                                                                              (> (comprehensible? vocab) *min-word-comprehensibility*))
                                                                         (princ "o")
                                                                         (progn
                                                                           (princ ".")
                                                                           nil))))
                                                     ;; Any error will cause the system to refuse the link (typically because the site is unreachable or contains invalid content)
                                                     (error (err-text)
                                                       (declare (ignore err-text))
                                                       (princ "E")
                                                       nil))
                                                   (princ "X")))
                                           urls-5)))
               urls-6))
           (chosen-links (starting-url visited-urls same-domain?)
             (redownload-url starting-url)
             (let* ((domain (find-domain starting-url))
                    (urls (filter-urls (downloaded-vetted-links starting-url)
                                       domain visited-urls (mapcar #'find-domain visited-urls) same-domain?))
                    (origin-urls (filter-urls (mapcar #'read-origin
                                                      urls)
                                              domain visited-urls (mapcar #'find-domain visited-urls) same-domain?)))
               origin-urls)))
    (let* ((links (print (chosen-links current-url visited-urls t)))
           (link-scores (map-to-hash #'(lambda (url) (zoombot-url-value url target))
                                     links)))
      (if links
          (best-element (reverse links) #'> #'(lambda (url) (gethash url link-scores)))))))

(defun domain-links (seed target count seed-value)
  (print (concat "Chosen value: " seed-value))
  ;; visits links in succession (different from interdomain, may change) to get wider site coverage
  ;; if it finds no valid links, it keeps trying again (maybe getting other links)
  (let ((scores (let ((acc (ht)))
                  (setf (gethash seed acc)
                        seed-value)
                  acc))
        (visited (list seed))
        (current-url seed))
    (dotimes (i count)
      (print current-url)
      (multiple-value-bind (url score)
          (next-link current-url visited target)
        (setf (gethash current-url scores)
              (zoombot-url-value current-url target))
        (append-to-file "../DATA/scores" (concat (my-round (gethash current-url scores)) " " current-url))
        (setf (gethash url scores) score)
        (setf current-url url)
        (push url visited)))
    (values visited scores)))

(let ((discovered-urls (ht)))
  (defun save-discovered ()
    (overwrite-file *discovered-file* (hashtable-to-assoc discovered-urls)))
  
  (defun discover (url)
    (let* ((class (place url))
           (existing-urls (gethash class discovered-urls)))
      (if (not (member url existing-urls :test #'equal))
          (setf (gethash class discovered-urls)
                (append1 existing-urls
                         url)))
      class)))
